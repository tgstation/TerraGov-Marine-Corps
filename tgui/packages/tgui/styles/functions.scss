/**
 * Copyright (c) 2020 Aleksej Komarov
 * SPDX-License-Identifier: MIT
 */

@use 'sass:color';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';

//  Type-casting
// --------------------------------------------------------

// Get a unit-less numeric value
@function num($value) {
  @if meta.type-of($value) != number {
    @error 'Could not convert `#{$value}` - must be `type-of number`';
    @return null;
  }
  @if math.unit($value) == '%' {
    @return math.div($value, 100%);
  }
  @return math.div($value, $value * 0 + 1);
}

//  Color
// --------------------------------------------------------

// Returns the NTSC luminance of `$color` as a float (between 0 and 1).
// 1 is pure white, 0 is pure black.
@function luminance($color) {
  $colors: (
    'red': color.channel($color, 'red', $space: rgb),
    'green': color.channel($color, 'green', $space: rgb),
    'blue': color.channel($color, 'blue', $space: rgb),
  );

  @each $name, $value in $colors {
    $adjusted: 0;
    $value: math.div($value, 255);
    @if $value < 0.03928 {
      $value: math.div($value, 12.92);
    } @else {
      $value: math.div($value + 0.055, 1.055);
      $value: math.pow($value, 2.4);
    }
    // prettier-ignore
    $colors: map.merge($colors, (
      $name: $value,
    ));
  }

  // prettier-ignore
  @return (map.get($colors, 'red') * .2126)
    + (map.get($colors, 'green') * .7152)
    + (map.get($colors, 'blue') * .0722);
}

// Blends an RGBA color with a static background color based on its
// alpha channel. Returns an RGB color, which is compatible with IE8.
@function fake-alpha($color-rgba, $color-background) {
  @return color.mix(
    color.change($color-rgba, $alpha: 1),
    $color-background,
    color.alpha($color-rgba) * 100%
  );
}

// Multiplies our viewport units by the DPI scaling amount
// to ensure that they display correctly when using differently-scaled windows
@function vp($viewportUnit) {
  @return calc(var(--scaling-amount) * $viewportUnit);
}
