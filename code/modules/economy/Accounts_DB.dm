
/obj/machinery/account_database
	name = "Accounts uplink terminal"
	desc = "Access transaction logs, account data and all kinds of other financial records."
	icon = 'icons/obj/machines/computer.dmi'
	icon_state = "aiupload"
	density = TRUE
	req_one_access = list(ACCESS_MARINE_CAPTAIN)
	var/receipt_num
	var/machine_id = ""
	var/obj/item/card/id/held_card
	var/datum/money_account/detailed_account_view
	var/creating_new_account = 0

	proc/get_access_level()
		if (!held_card)
			return 0
		if(ACCESS_NT_CORPORATE in held_card.access)
			return 2
		else if(ACCESS_MARINE_BRIDGE in held_card.access || ACCESS_MARINE_CAPTAIN in held_card.access)
			return 1

	proc/create_transation(target, reason, amount)
		var/datum/transaction/T = new()
		T.target_name = target
		T.purpose = reason
		T.amount = amount
		T.date = GLOB.current_date_string
		T.time = worldtime2text()
		T.source_terminal = machine_id
		return T

	proc/accounting_letterhead(report_name)
		return {"
			<center><h1><b>[report_name]</b></h1></center>
			<center><small><i>Accounting Report</i></small></center>
			<hr>
			<u>Generated By:</u> [held_card.registered_name], [held_card.assignment]<br>
		"}

/obj/machinery/account_database/New()
	machine_id = "Acc. DB #[GLOB.num_financial_terminals++]"
	return ..()

/obj/machinery/account_database/attackby(obj/item/I, mob/user, params)
	. = ..()

	if(held_card)
		return

	if(istype(I, /obj/item/card/id))
		user.drop_held_item()
		I.forceMove(src)
		held_card = I

		SSnano.update_uis(src)

	attack_hand(user)

/obj/machinery/account_database/attack_hand(mob/living/user)
	. = ..()
	if(.)
		return
	if(machine_stat & (NOPOWER|BROKEN)) return
	ui_interact(user)

/obj/machinery/account_database/ui_interact(mob/user, ui_key="main", datum/nanoui/ui = null, force_open = 1)
	user.set_interaction(src)

	var/data[0]
	data["src"] = "\ref[src]"
	data["id_inserted"] = !!held_card
	data["id_card"] = held_card ? text("[held_card.registered_name], [held_card.assignment]") : "-----"
	data["access_level"] = get_access_level()
	data["machine_id"] = machine_id
	data["creating_new_account"] = creating_new_account
	data["detailed_account_view"] = !!detailed_account_view
	var/datum/money_account/SA = GLOB.station_account
	data["station_account_number"] = SA.account_number
	data["transactions"] = null
	data["accounts"] = null

	if (detailed_account_view)
		data["account_number"] = detailed_account_view.account_number
		data["owner_name"] = detailed_account_view.owner_name
		data["money"] = detailed_account_view.money
		data["suspended"] = detailed_account_view.suspended

		var/list/trx[0]
		for (var/datum/transaction/T in detailed_account_view.transaction_log)
			trx.Add(list(list(\
				"date" = T.date, \
				"time" = T.time, \
				"target_name" = T.target_name, \
				"purpose" = T.purpose, \
				"amount" = T.amount, \
				"source_terminal" = T.source_terminal)))

		if (trx.len > 0)
			data["transactions"] = trx

	var/list/accounts[0]
	for(var/i in GLOB.all_money_accounts)
		var/datum/money_account/D = i
		accounts.Add(list(list(\
			"account_number"=D.account_number,\
			"owner_name"=D.owner_name,\
			"suspended"=D.suspended ? "SUSPENDED" : "",\
			"account_index"=i)))

	if (accounts.len > 0)
		data["accounts"] = accounts

	ui = SSnano.try_update_ui(user, src, ui_key, ui, data, force_open)
	if (!ui)
		ui = new(user, src, ui_key, "accounts_terminal.tmpl", src.name, 400, 640)
		ui.set_initial_data(data)
		ui.open()
