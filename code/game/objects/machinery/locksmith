/obj/machinery/locksmith
	name = "locksmith"
	desc = "Can fabricate locks and keys, as well as clone them."
	icon = 'icons/obj/machines/research.dmi'
	icon_state = "circuit_imprinter"	//Needs a new sprite
	resistance_flags = RESIST_ALL	//Marines can't just make new ones
	density = TRUE
	use_power = ACTIVE_POWER_USE
	active_power_usage = 500
	///Lock ID used for creating or copying locks and keys; for mappers, set this to something if you want it to create only one type of lock/key
	var/lock_id = null
	///Reference to the lock or key item used for creating/copying
	var/datum/weakref/master_item
	///How much crafting material this machine currently has
	var/materials_amount = 0
	///How much crafting material this machine can hold
	var/max_materials_amount = 10
	///Sound played when copying lock data or manufacturing an item; temp sound
	var/success_sound = 'sound/machines/ping.ogg'
	///Choices for the radial menu, generated on initialization
	var/list/choices_list

/obj/machinery/locksmith/Initialize(mapload)
	. = ..()
	choices_list = list("lock" = image(/obj/item/lock::icon, icon_state = /obj/item/lock::icon_state), "key" = image(/obj/item/key::icon, icon_state = /obj/item/key::icon_state))
	if(!lock_id)	//Don't add an eject button if this locksmith was mapped in with a specific lock_id
		choices_list["eject"] = image('icons/mob/radial.dmi', icon_state = "radial_eject")

/obj/machinery/locksmith/examine(mob/user)
	. = ..()
	. += span_notice("Current lock data: [lock_id ? span_bold(lock_id) : "N/A"]")
	. += span_notice("Contains [span_bold("[materials_amount]/[max_materials_amount]")] units of materials.")

//It only accepts rods and metals; could be made more generic via an associative list if someone really wants to get fancy and require materials like gold
/obj/machinery/locksmith/attackby(obj/item/attacking_item, mob/user, params)
	. = ..()
	if(!anchored)
		balloon_alert(user, "Not anchored")
		return

	if(isdoorkey(attacking_item))
		if(lock_id)
			if(tgui_alert(user, "Do you want to copy [lock_id] onto this key?", "Locksmith Key Copying", list("Yes", "No")) != "Yes")
				return

			var/obj/item/key/door/key = attacking_item
			key.personal_lock_id = lock_id
			playsound(src, success_sound, 30, FALSE, 5, 1)
			return

		var/obj/item/key/door/key = attacking_item
		lock_id = key.personal_lock_id
		master_item = WEAKREF(key)
		user.temporarilyRemoveItemFromInventory(key)
		key.forceMove(src)
		return

	if(islock(attacking_item))
		if(lock_id)
			if(tgui_alert(user, "Do you want to copy [lock_id] onto this lock?", "Locksmith Lock Copying", list("Yes", "No")) != "Yes")
				return

			var/obj/item/lock/lock = attacking_item
			lock.personal_lock_id = lock_id
			playsound(src, success_sound, 30, FALSE, 5, 1)
			return

		var/obj/item/lock/lock = attacking_item
		lock_id = lock.personal_lock_id
		master_item = WEAKREF(lock)
		user.temporarilyRemoveItemFromInventory(lock)
		lock.forceMove(src)
		return

	if(istype(attacking_item, /obj/item/stack/rods))
		if(materials_amount == max_materials_amount)
			balloon_alert(user, "Full!")
			return

		var/obj/item/stack/rods/rods = attacking_item
		if(rods.zero_amount())
			balloon_alert(user, "Not enough")
			return

		//Either add the full amount of rods or as many as can fit
		var/amount_to_use = min(rods.get_amount(), max_materials_amount - materials_amount)
		rods.use(amount_to_use)
		materials_amount += amount_to_use
		return

	//Metal is a little different, each sheet adds 2 points of material
	if(istype(attacking_item, /obj/item/stack/sheet/metal))
		var/amount_needed_rounded_down = FLOOR((max_materials_amount - materials_amount) / 2, 1)
		if((materials_amount == max_materials_amount) || amount_needed_rounded_down < 1)
			balloon_alert(user, "Full!")
			return

		var/obj/item/stack/sheet/metal/metal = attacking_item
		if(metal.zero_amount())
			balloon_alert(user, "Not enough")
			return

		var/amount_to_use = min(metal.get_amount(), amount_needed_rounded_down)
		metal.use(amount_to_use)
		materials_amount += amount_to_use * 2
		return

/obj/machinery/locksmith/interact(mob/user)
	. = ..()
	if(!powered(power_channel))
		balloon_alert(user, "No power")
		return

	if(!anchored)
		balloon_alert(user, "Not anchored")
		return

	var/choice = show_radial_menu(user, src, require_near = TRUE, choices = choices_list)
	if(!powered(power_channel))
		balloon_alert(user, "No power")
		return

	use_power(active_power_usage, power_channel)
	switch(choice)
		if("eject")
			var/obj/item_to_eject = master_item.resolve()
			if(!item_to_eject)
				balloon_alert(user, "No master item inserted")
				return

			item_to_eject.forceMove(get_turf(src))
			lock_id = null
			master_item = null

		if("lock")
			if(materials_amount < 2)
				balloon_alert(user, "Not enough materials")
				return

			new /obj/item/lock(get_turf(src), lock_id)
			materials_amount -= 2
			playsound(src, success_sound, 30, FALSE, 5, 1)

		if("key")
			if(materials_amount < 1)
				balloon_alert(user, "Not enough materials")
				return

			new /obj/item/key(get_turf(src), lock_id)
			materials_amount--
			playsound(src, success_sound, 30, FALSE, 5, 1)

/obj/machinery/locksmith/wrench_act(mob/living/user, obj/item/I)
	anchored = !anchored
	balloon_alert(user, anchored ? "Anchored" : "Unanchored")
	return TRUE
